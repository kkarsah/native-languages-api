version: '3.8'

services:
  # =============================================================================
  # LOAD BALANCER
  # =============================================================================
  
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./frontend/website:/var/www/website  # Add website files
    restart: unless-stopped
    networks:
      - api-network

  # =============================================================================
  # FRONTEND - WEBSITE
  # =============================================================================
  
  website:
    image: nginx:alpine
    container_name: website-server
    volumes:
      - ./frontend/website:/usr/share/nginx/html
    ports:
      - "8081:80"  # Exposed for direct access during development
    restart: unless-stopped
    networks:
      - api-network

  # =============================================================================
  # API GATEWAY
  # =============================================================================
  
  kong:
    image: kong:3.4
    container_name: kong-gateway
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_PORT=5432
      - KONG_PG_USER=${DB_USER}
      - KONG_PG_PASSWORD=${DB_PASSWORD}
      - KONG_PG_DATABASE=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - api-network

  # =============================================================================
  # MICROSERVICES
  # =============================================================================
  
  languages-service:
    build: ./services/languages
    container_name: languages-service
    environment:
      - NODE_ENV=${ENVIRONMENT}
      - DB_HOST=${DB_HOST}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3100:3000"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - api-network

  audio-service:
    build: ./services/audio
    container_name: audio-service
    environment:
      - NODE_ENV=${ENVIRONMENT}
      - DB_HOST=${DB_HOST}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3101:3001"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - api-network

  users-service:
    build: ./services/users
    container_name: users-service
    environment:
      - NODE_ENV=${ENVIRONMENT}
      - DB_HOST=${DB_HOST}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3102:3002"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - api-network

  analytics-service:
    build: ./services/analytics
    container_name: analytics-service
    environment:
      - NODE_ENV=${ENVIRONMENT}
      - DB_HOST=${DB_HOST}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3103:3003"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - api-network

  admin-service:
    build: ./services/admin
    container_name: admin-service
    environment:
      - NODE_ENV=${ENVIRONMENT}
      - DB_HOST=${DB_HOST}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3104:3004"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - api-network

  webhooks-service:
    build: ./services/webhooks
    container_name: webhooks-service
    environment:
      - NODE_ENV=${ENVIRONMENT}
      - DB_HOST=${DB_HOST}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3105:3005"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - api-network

  # =============================================================================
  # DATABASES
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - api-network

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - api-network

  # =============================================================================
  # MONITORING
  # =============================================================================
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - api-network

  # =============================================================================
  # UTILITIES
  # =============================================================================
  
  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - api-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  api-network:
    driver: bridge